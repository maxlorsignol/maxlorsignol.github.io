title = "Owner Types",
opacity = 0.7,
group = owner_legend_group
)
# Add legend groups to the overlay groups
overlay_groups <- c(overlay_groups, weights_legend_group, owner_legend_group)
# Finish map setup
main_map <- main_map %>%
# Center the view
setView(lng = -123.155, lat = 49.7016, zoom = 12) %>%
# Add a layers control for toggling layers (including legends)
addLayersControl(
overlayGroups = overlay_groups,
options = layersControlOptions(collapsed = FALSE)
) %>%
# Hide weighted layer and weights legend by default
hideGroup("Weighted Layer") %>%
hideGroup(weights_legend_group)
# Display the map
main_map
library(dplyr)
library(leaflet)
library(sf)
library(rmapshaper)
library(geojsonsf)
library(raster)
library(stars)
library(leaflet.extras)
# Function to load, transform, and validate spatial data
process_spatial_data <- function(file_path, simplify = FALSE, keep_ratio = 0.10) {
data <- st_read(file_path, quiet = TRUE)
# Reproject to WGS84 if needed
if (st_crs(data)$epsg != 4326) {
data <- st_transform(data, crs = 4326)
}
# Validate geometry
data <- st_make_valid(data)
# Simplify geometry if requested
if (simplify) {
data <- ms_simplify(data, keep = keep_ratio)
}
data <- sf_geojson(data) %>% geojson_sf()
return(data)
}
# Define all datasets to load
datasets <- list(
bc_parcel = list(
path = "~/GitHub/E-Portfolio/data/HoweSound_Parcel_all.shp",
simplify = TRUE,
keep_ratio = 0.1,
color_type = "fixed",
color = "grey",
weight = 1,
fillOpacity = 0.3,
group = "BC Parcel Fabric",
label_field = "PARCEL_POL",
label_prefix = "Parcel: ",
is_oecm_candidate = FALSE
),
scrd_parcels = list(
path = "~/GitHub/E-Portfolio/data/SCRD_oecm_candidates.shp",
simplify = TRUE,
keep_ratio = 0.1,
color_type = "owner",  # Will use owner type palette
weight = 1,
fillOpacity = 0.5,
group = "SCRD OECM Candidates",
label_field = "OWNER_TYPE",
label_prefix = "Owner: ",
is_oecm_candidate = TRUE
),
mvrd_parcels = list(
path = "~/GitHub/E-Portfolio/data/MVRD_oecm_candidates.shp",
simplify = TRUE,
keep_ratio = 0.1,
color_type = "owner",  # Will use owner type palette
weight = 1,
fillOpacity = 0.5,
group = "MVRD OECM Candidates",
label_field = "OWNER_TYPE",
label_prefix = "Owner: ",
is_oecm_candidate = TRUE
),
slrd_parcels = list(
path = "~/GitHub/E-Portfolio/data/SLRD_oecm_candidates.shp",
simplify = TRUE,
keep_ratio = 0.1,
color_type = "owner",  # Will use owner type palette
weight = 1,
fillOpacity = 0.5,
group = "SLRD OECM Candidates",
label_field = "OWNER_TYPE",
label_prefix = "Owner: ",
is_oecm_candidate = TRUE
)
)
# Process all vector datasets
spatial_data <- list()
for (name in names(datasets)) {
tryCatch({
spatial_data[[name]] <- process_spatial_data(
datasets[[name]]$path,
datasets[[name]]$simplify,
datasets[[name]]$keep_ratio
)
cat("Loaded:", name, "\n")
}, error = function(e) {
cat("Error loading", name, ":", e$message, "\n")
})
}
# Load weighted layer directly as raster and mask out pixels with value of 999
weighted_raster <- NULL
tryCatch({
# Load the raster file
weighted_raster <- raster("~/GitHub/E-Portfolio/data/HoweSound_Weighted_Suitability.tif")
# Mask out pixels with value 999
weighted_raster[weighted_raster == 999] <- NA
cat("Raster loaded successfully\n")
}, error = function(e) {
cat("Error loading raster:", e$message, "\n")
})
# Collect all unique OWNER_TYPE values from OECM candidate datasets
all_owner_types <- c()
for (name in names(spatial_data)) {
if (datasets[[name]]$is_oecm_candidate && "OWNER_TYPE" %in% names(spatial_data[[name]])) {
all_owner_types <- c(all_owner_types, unique(spatial_data[[name]]$OWNER_TYPE))
}
}
all_owner_types <- unique(all_owner_types)
# Define the color palettes
owner_pal <- colorFactor(palette = "Set3", domain = all_owner_types)
# Get domain for raster values
if (!is.null(weighted_raster)) {
raster_min <- cellStats(weighted_raster, min, na.rm = TRUE)
raster_max <- cellStats(weighted_raster, max, na.rm = TRUE)
weight_pal <- colorNumeric(palette = "YlGnBu", domain = c(raster_min, raster_max))
} else {
weight_pal <- colorNumeric(palette = "YlGnBu", domain = c(0, 5))
}
# Initialize the leaflet map
main_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron", options = providerTileOptions(
updateWhenZooming = FALSE,  # Performance improvement
updateWhenIdle = TRUE       # Performance improvement
))
# Create vector of overlay groups
overlay_groups <- c()
# Add raster weighted layer
if (!is.null(weighted_raster)) {
main_map <- main_map %>%
addRasterImage(
weighted_raster,
colors = weight_pal,
opacity = 0.7,
group = "Weighted Layer"
)
overlay_groups <- c(overlay_groups, "Weighted Layer")
}
# Add vector layers to the map
for (name in names(spatial_data)) {
dataset_config <- datasets[[name]]
data <- spatial_data[[name]]
# Skip if data is empty or invalid
if (is.null(data) || nrow(data) == 0) next
# Determine color handling based on color_type
if (dataset_config$color_type == "owner") {
color_param <- ~owner_pal(OWNER_TYPE)
} else {
color_param <- dataset_config$color
}
# Create label based on specified field
label_field <- dataset_config$label_field
label_prefix <- dataset_config$label_prefix
# Add to map
main_map <- main_map %>%
addPolygons(
data = data,
color = color_param,
weight = dataset_config$weight,
fillOpacity = dataset_config$fillOpacity,
group = dataset_config$group,
label = ~paste0(label_prefix, get(label_field)),
# Performance improvements:
smoothFactor = 0.8,
options = pathOptions(
clickable = TRUE,
maxZoom = 16  # Prevent rendering at very high zoom levels
),
# Simplified highlight options
highlightOptions = highlightOptions(
weight = 2,
bringToFront = TRUE
)
)
# Add to overlay groups
overlay_groups <- c(overlay_groups, dataset_config$group)
}
# Create a group for the legends
weights_legend_group <- "Weights Legend"
owner_legend_group <- "Owner Types Legend"
# Add legends as their own groups
main_map <- main_map %>%
# Add weight legend as a separate group
addLegend(
position = "bottomright",
pal = weight_pal,
values = if (!is.null(weighted_raster)) c(raster_min, raster_max) else c(0, 5),
title = "Weight Values",
opacity = 0.7,
group = weights_legend_group
) %>%
# Add owner type legend as a separate group
addLegend(
position = "bottomright",
pal = owner_pal,
values = all_owner_types,
title = "Owner Types",
opacity = 0.7,
group = owner_legend_group
)
# Add legend groups to the overlay groups
overlay_groups <- c(overlay_groups, weights_legend_group, owner_legend_group)
# Finish map setup
main_map <- main_map %>%
# Center the view
setView(lng = -123.155, lat = 49.7016, zoom = 12) %>%
# Add a layers control for toggling layers (including legends)
addLayersControl(
overlayGroups = overlay_groups,
options = layersControlOptions(collapsed = FALSE)
) %>%
# Hide weighted layer and weights legend by default
hideGroup("Weighted Layer") %>%
hideGroup(weights_legend_group)
# Display the map
main_map
library(dplyr)
library(leaflet)
library(sf)
library(rmapshaper)
library(geojsonsf)
library(raster)
library(stars)
library(leaflet.extras)
# Function to load, transform, and validate spatial data
process_spatial_data <- function(file_path, simplify = FALSE, keep_ratio = 0.10) {
data <- st_read(file_path, quiet = TRUE)
# Reproject to WGS84 if needed
if (st_crs(data)$epsg != 4326) {
data <- st_transform(data, crs = 4326)
}
# Validate geometry
data <- st_make_valid(data)
# Simplify geometry if requested
if (simplify) {
data <- ms_simplify(data, keep = keep_ratio)
}
data <- sf_geojson(data) %>% geojson_sf()
return(data)
}
# Define all datasets to load
datasets <- list(
bc_parcel = list(
path = "~/GitHub/E-Portfolio/data/HoweSound_Parcel_all.shp",
simplify = TRUE,
keep_ratio = 0.1,
color_type = "fixed",
color = "grey",
weight = 1,
fillOpacity = 0.3,
group = "BC Parcel Fabric",
label_field = "PARCEL_POL",
label_prefix = "Parcel: ",
is_oecm_candidate = FALSE
),
scrd_parcels = list(
path = "~/GitHub/E-Portfolio/data/SCRD_oecm_candidates.shp",
simplify = TRUE,
keep_ratio = 0.1,
color_type = "owner",  # Will use owner type palette
weight = 1,
fillOpacity = 0.5,
group = "SCRD OECM Candidates",
label_field = "OWNER_TYPE",
label_prefix = "Owner: ",
is_oecm_candidate = TRUE
),
mvrd_parcels = list(
path = "~/GitHub/E-Portfolio/data/MVRD_oecm_candidates.shp",
simplify = TRUE,
keep_ratio = 0.1,
color_type = "owner",  # Will use owner type palette
weight = 1,
fillOpacity = 0.5,
group = "MVRD OECM Candidates",
label_field = "OWNER_TYPE",
label_prefix = "Owner: ",
is_oecm_candidate = TRUE
),
slrd_parcels = list(
path = "~/GitHub/E-Portfolio/data/SLRD_oecm_candidates.shp",
simplify = TRUE,
keep_ratio = 0.1,
color_type = "owner",  # Will use owner type palette
weight = 1,
fillOpacity = 0.5,
group = "SLRD OECM Candidates",
label_field = "OWNER_TYPE",
label_prefix = "Owner: ",
is_oecm_candidate = TRUE
)
)
# Process all vector datasets
spatial_data <- list()
for (name in names(datasets)) {
tryCatch({
spatial_data[[name]] <- process_spatial_data(
datasets[[name]]$path,
datasets[[name]]$simplify,
datasets[[name]]$keep_ratio
)
cat("Loaded:", name, "\n")
}, error = function(e) {
cat("Error loading", name, ":", e$message, "\n")
})
}
# Load weighted layer directly as raster and mask out pixels with value of 999
weighted_raster <- NULL
tryCatch({
# Load the raster file
weighted_raster <- raster("~/GitHub/E-Portfolio/data/hs_weighted_raster.tif")
# Mask out pixels with value 999
weighted_raster[weighted_raster == 999] <- NA
cat("Raster loaded successfully\n")
}, error = function(e) {
cat("Error loading raster:", e$message, "\n")
})
# Collect all unique OWNER_TYPE values from OECM candidate datasets
all_owner_types <- c()
for (name in names(spatial_data)) {
if (datasets[[name]]$is_oecm_candidate && "OWNER_TYPE" %in% names(spatial_data[[name]])) {
all_owner_types <- c(all_owner_types, unique(spatial_data[[name]]$OWNER_TYPE))
}
}
all_owner_types <- unique(all_owner_types)
# Define the color palettes
owner_pal <- colorFactor(palette = "Set3", domain = all_owner_types)
# Get domain for raster values
if (!is.null(weighted_raster)) {
raster_min <- cellStats(weighted_raster, min, na.rm = TRUE)
raster_max <- cellStats(weighted_raster, max, na.rm = TRUE)
weight_pal <- colorNumeric(palette = "YlGnBu", domain = c(raster_min, raster_max))
} else {
weight_pal <- colorNumeric(palette = "YlGnBu", domain = c(0, 5))
}
# Initialize the leaflet map
main_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron", options = providerTileOptions(
updateWhenZooming = FALSE,  # Performance improvement
updateWhenIdle = TRUE       # Performance improvement
))
# Create vector of overlay groups
overlay_groups <- c()
# Add raster weighted layer
if (!is.null(weighted_raster)) {
main_map <- main_map %>%
addRasterImage(
weighted_raster,
colors = weight_pal,
opacity = 0.7,
group = "Weighted Layer"
)
overlay_groups <- c(overlay_groups, "Weighted Layer")
}
library(dplyr)
library(leaflet)
library(sf)
library(rmapshaper)
library(geojsonsf)
library(raster)
library(stars)
library(leaflet.extras)
# Function to load, transform, and validate spatial data
process_spatial_data <- function(file_path, simplify = FALSE, keep_ratio = 0.10) {
data <- st_read(file_path, quiet = TRUE)
# Reproject to WGS84 if needed
if (st_crs(data)$epsg != 4326) {
data <- st_transform(data, crs = 4326)
}
# Validate geometry
data <- st_make_valid(data)
# Simplify geometry if requested
if (simplify) {
data <- ms_simplify(data, keep = keep_ratio)
}
data <- sf_geojson(data) %>% geojson_sf()
return(data)
}
# Define all datasets to load
datasets <- list(
bc_parcel = list(
path = "~/GitHub/E-Portfolio/data/HoweSound_Parcel_all.shp",
simplify = TRUE,
keep_ratio = 0.1,
color_type = "fixed",
color = "grey",
weight = 1,
fillOpacity = 0.3,
group = "BC Parcel Fabric",
label_field = "PARCEL_POL",
label_prefix = "Parcel: ",
is_oecm_candidate = FALSE
),
scrd_parcels = list(
path = "~/GitHub/E-Portfolio/data/SCRD_oecm_candidates.shp",
simplify = TRUE,
keep_ratio = 0.1,
color_type = "owner",  # Will use owner type palette
weight = 1,
fillOpacity = 0.5,
group = "SCRD OECM Candidates",
label_field = "OWNER_TYPE",
label_prefix = "Owner: ",
is_oecm_candidate = TRUE
),
mvrd_parcels = list(
path = "~/GitHub/E-Portfolio/data/MVRD_oecm_candidates.shp",
simplify = TRUE,
keep_ratio = 0.1,
color_type = "owner",  # Will use owner type palette
weight = 1,
fillOpacity = 0.5,
group = "MVRD OECM Candidates",
label_field = "OWNER_TYPE",
label_prefix = "Owner: ",
is_oecm_candidate = TRUE
),
slrd_parcels = list(
path = "~/GitHub/E-Portfolio/data/SLRD_oecm_candidates.shp",
simplify = TRUE,
keep_ratio = 0.1,
color_type = "owner",  # Will use owner type palette
weight = 1,
fillOpacity = 0.5,
group = "SLRD OECM Candidates",
label_field = "OWNER_TYPE",
label_prefix = "Owner: ",
is_oecm_candidate = TRUE
)
)
# Process all vector datasets
spatial_data <- list()
for (name in names(datasets)) {
tryCatch({
spatial_data[[name]] <- process_spatial_data(
datasets[[name]]$path,
datasets[[name]]$simplify,
datasets[[name]]$keep_ratio
)
cat("Loaded:", name, "\n")
}, error = function(e) {
cat("Error loading", name, ":", e$message, "\n")
})
}
# Load weighted layer directly as raster and mask out pixels with value of 999
weighted_raster <- NULL
tryCatch({
# Load the raster file
weighted_raster <- raster("~/GitHub/E-Portfolio/data/hs_weighted_raster.tif")
# Mask out pixels with value 999
weighted_raster[weighted_raster == 999] <- NA
cat("Raster loaded successfully\n")
}, error = function(e) {
cat("Error loading raster:", e$message, "\n")
})
# Collect all unique OWNER_TYPE values from OECM candidate datasets
all_owner_types <- c()
for (name in names(spatial_data)) {
if (datasets[[name]]$is_oecm_candidate && "OWNER_TYPE" %in% names(spatial_data[[name]])) {
all_owner_types <- c(all_owner_types, unique(spatial_data[[name]]$OWNER_TYPE))
}
}
all_owner_types <- unique(all_owner_types)
# Define the color palettes
owner_pal <- colorFactor(palette = "Set3", domain = all_owner_types)
# Get domain for raster values
if (!is.null(weighted_raster)) {
raster_min <- cellStats(weighted_raster, min, na.rm = TRUE)
raster_max <- cellStats(weighted_raster, max, na.rm = TRUE)
weight_pal <- colorNumeric(palette = "YlGnBu", domain = c(raster_min, raster_max))
} else {
weight_pal <- colorNumeric(palette = "YlGnBu", domain = c(0, 5))
}
# Initialize the leaflet map
main_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron", options = providerTileOptions(
updateWhenZooming = FALSE,  # Performance improvement
updateWhenIdle = TRUE       # Performance improvement
))
# Create vector of overlay groups
overlay_groups <- c()
# Add raster weighted layer
if (!is.null(weighted_raster)) {
main_map <- main_map %>%
addRasterImage(
weighted_raster,
colors = weight_pal,
opacity = 0.7,
group = "Weighted Layer"
)
overlay_groups <- c(overlay_groups, "Weighted Layer")
}
